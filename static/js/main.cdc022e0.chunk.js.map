{"version":3,"sources":["Components/NavBar.js","Pages/FeaturedProjects.js","Pages/FrontPage.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","d","Date","months","useState","toLocaleTimeString","fullTime","setTime","getMonth","getDate","getFullYear","fullDate","setDate","useEffect","setInterval","menu","setMenu","plusClick","handleClick","alert","className","onClick","CSSTransition","in","classNames","timeout","unmountOnExit","FeaturedProjects","FrontPage","App","props","AOS","init","duration","data-aos","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uZA8CeA,G,MA3CA,WACX,IAAIC,EAAI,IAAIC,KACNC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAF7E,EAGWC,mBAASH,EAAEI,sBAHtB,mBAGVC,EAHU,KAGAC,EAHA,OAIWH,mBAASD,EAAOF,EAAEO,YAAc,IAAMP,EAAEQ,UAAY,MAAQR,EAAES,eAJzE,mBAIVC,EAJU,KAIAC,EAJA,KAKjBC,qBAAU,WACNC,aAAY,WACR,IAAIb,EAAI,IAAIC,KACZK,EAAQN,EAAEI,sBACVO,EAAQT,EAAOF,EAAEO,YAAc,IAAMP,EAAEQ,UAAY,MAAQR,EAAES,iBAC9D,QAVU,MAYON,oBAAS,GAZhB,mBAYVW,EAZU,KAYJC,EAZI,KAajB,SAASC,IACLD,GAASD,GAEb,SAASG,IACLC,MAAM,mBAEV,OACI,yBAAKC,UAAW,UACXL,EACG,uBAAGK,UAAW,OAAQC,QAASJ,GAA/B,KAEA,uBAAGG,UAAW,OAAQC,QAASJ,GAA/B,KAEJ,uBAAGG,UAAW,QAAST,GACvB,yBAAKS,UAAW,YACZ,wBAAIA,UAAW,mBAEnB,uBAAGA,UAAW,QAAd,oBACA,uBAAGA,UAAW,eAAgBd,GAC9B,kBAACgB,EAAA,EAAD,CAAeC,GAAIR,EAAMS,WAAW,UAAUC,QAAS,IAAKC,eAAa,GACrE,uBAAGN,UAAW,UACV,uBAAGA,UAAW,QAASC,QAASH,GAAhC,SACA,uBAAGE,UAAW,OAAQC,QAASH,GAA/B,QACA,uBAAGE,UAAW,UAAWC,QAASH,GAAlC,gBCjBLS,G,MAnBU,WACrB,OACI,yBAAKP,UAAW,YACZ,yBAAKA,UAAW,aAChB,yBAAKA,UAAW,aAChB,uBAAGA,UAAW,YAAd,YACA,uBAAGA,UAAW,YAAd,YACA,yBAAKA,UAAW,QACZ,yBAAKA,UAAW,aAChB,yBAAKA,UAAW,aACZ,uBAAGA,UAAW,mBAAd,SACA,uBAAGA,UAAW,kBAAd,uDACA,uBAAGA,UAAW,uBAAd,mBCaLQ,EAtBG,WAEd,OACI,yBAAKR,UAAW,aACZ,yBAAKA,UAAW,QACZ,4BAAQA,UAAW,kBACnB,4BAAQA,UAAW,mBAEvB,uBAAGA,UAAW,cAAd,gBACA,uBAAGA,UAAW,aAAd,mCACA,uBAAGA,UAAW,uBAAd,eAPJ,IAO0D,uBAAGA,UAAW,mCAAd,2BACtD,uBAAGA,UAAW,qBAAd,iBACA,uBAAGA,UAAW,mBAAd,kBACA,yBAAKA,UAAW,aAGhB,0BAAMA,UAAW,WACjB,kBAAC,EAAD,QCSGS,E,kDApBX,WAAYC,GAAO,IAAD,6BACd,cAAMA,GACNC,IAAIC,KAAK,CACLC,SAAW,OAHD,E,qDASd,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKC,WAAU,aACX,kBAAC,EAAD,Y,GAdFC,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cdc022e0.chunk.js","sourcesContent":["import {CSSTransition} from \"react-transition-group\";\nimport React, {useEffect, useState} from \"react\";\nimport './NavBar.css';\nconst NavBar = () => {\n    let d = new Date();\n    const months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEPT\", \"OCT\", \"NOV\", \"DEC\"];\n    const [fullTime, setTime] = useState(d.toLocaleTimeString());\n    const [fullDate, setDate] = useState(months[d.getMonth()] + \" \" + d.getDate() + \" - \" + d.getFullYear());\n    useEffect(() => {\n        setInterval(() => {\n            let d = new Date();\n            setTime(d.toLocaleTimeString());\n            setDate(months[d.getMonth()] + \" \" + d.getDate() + \" - \" + d.getFullYear());\n        }, 1000);\n    });\n    const [menu, setMenu] = useState(false);\n    function plusClick() {\n        setMenu(!menu);\n    }\n    function handleClick() {\n        alert(\"Button Clicked!\")\n    }\n    return (\n        <div className={'navbar'}>\n            {menu ? (\n                <a className={'plus'} onClick={plusClick}>-</a>\n            ) : (\n                <a className={'plus'} onClick={plusClick}>+</a>\n            )}\n            <a className={'date'}>{fullDate}</a>\n            <div className={'vector-2'} >\n                <hr className={'vector-2-line'}/>\n            </div>\n            <a className={'time'}>IT IS CURRENTLY:</a>\n            <a className={'time actual'}>{fullTime}</a>\n            <CSSTransition in={menu} classNames=\"example\" timeout={350} unmountOnExit >\n                <a className={'popout'} >\n                    <a className={'about'} onClick={handleClick}>ABOUT</a>\n                    <a className={'work'} onClick={handleClick}>WORK</a>\n                    <a className={'contact'} onClick={handleClick}>CONTACT</a>\n                </a>\n            </CSSTransition>\n        </div>\n    )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './FeaturedProjects.css';\n\nconst FeaturedProjects = () => {\n    return (\n        <div className={'featproj'}>\n            <div className={'vector-3'}></div>\n            <div className={'vector-4'}></div>\n            <a className={'featured'}>FEATURED</a>\n            <a className={'projtext'}>projects</a>\n            <div className={'proj'} >\n                <div className={'proj img'} />\n                <div className={'proj desc'} >\n                    <a className={'proj desc title'}>Title</a>\n                    <a className={'proj desc text'}>Description about my awesome and very cool project.</a>\n                    <a className={'proj desc learnmore'}>LEARN MORE</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FeaturedProjects;\n","import {CSSTransition} from \"react-transition-group\";\nimport React, {useEffect, useState} from \"react\";\nimport './FrontPage.css';\nimport NavBar from \"../Components/NavBar\";\nimport FeaturedProjects from \"./FeaturedProjects\";\n\nconst FrontPage = () => {\n\n    return (\n        <div className={\"frontpage\"} >\n            <svg className={\"logo\"} >\n                <circle className={\"logo-ellipse3\"}/>\n                <circle className={\"logo-ellipse2\"}/>\n            </svg>\n            <a className={\"intro-text\"} >hi, i'm aly!</a>\n            <a className={\"main-text\"} >DESIGNING WITHOUT THE BULLSH*T.</a>\n            <a className={\"main-text currently\"} >CURRENTLY: </a> <a className={\"main-text currently currentproj\"} >FINISHING THIS WEBSITE.</a>\n            <a className={\"main-text basedin\"} >BASED IN NYC.</a>\n            <a className={\"text-scrolldown\"} >SCROLL DOWN >></a>\n            <div className={'vector-1'}></div>\n\n\n            <span className={\"circle\"}/>\n            <FeaturedProjects />\n        </div>\n    )\n}\n\nexport default FrontPage;\n","import React from 'react';\nimport './App.css';\nimport 'typeface-lato';\nimport 'typeface-fira-code';\nimport 'aos/dist/aos.css';\nimport AOS from 'aos';\nimport FrontPage from \"./Pages/FrontPage\";\nimport FeaturedProjects from \"./Pages/FeaturedProjects\";\nimport NavBar from \"./Components/NavBar\";\nimport {useTransition, animated} from 'react-spring';\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        AOS.init({\n            duration : 1500\n        })\n    }\n\n\n    render () {\n        return (\n            <div>\n                <NavBar/>\n                <div data-aos={\"fade-down\"} >\n                    <FrontPage/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}